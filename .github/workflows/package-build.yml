name: package builds

on:
  push:
    branches: [fix--cicid-for-c-ports]

env:
  PYTHON_VERSION: "3.10"

jobs:
  # build wheel and prepare tarball with sources. since sources are OS-agnostic
  # it's ok to owerwrite sdists prepared by each of OS
  # currently we don't support windows
  Build-Multiplatform-Package:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/production.txt
          pip install -r requirements/develop.txt
      - name: Build Wheel Package
        run: python setup.py sdist bdist_wheel
      - name: Checki if package can be uploaded to PyPI
        run: python -m twine check dist/*
      - name: Save artifacts
        uses: actions/upload-artifact@master
        with:
          name: dist_temp
          path: ./dist

  # previous job used Ubuntu OS, but PyPI requires ManyLinux distro, hence we
  # need to convert it properly
  Convert-Ubuntu-To-Manylinux:
    runs-on: ubuntu-latest
    needs: [Build-Multiplatform-Package]
    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip auditwheel
      - name: Download artifacts
        uses: actions/download-artifact@master
        with:
          name: dist_temp
          path: ./dist
      - name: Convert Ubuntu to ManyLinux
        run: |
          auditwheel show dist/network_diffusion-*-linux_x86_64.whl
          auditwheel repair --wheel-dir dist dist/network_diffusion-*-linux_x86_64.whl
      - name: Remove Ubuntu based build
        run: rm dist/network_diffusion-*-linux_x86_64.whl
      - name: Save artifacts
        uses: actions/upload-artifact@master
        with:
          name: dist_final
          path: ./dist

  # download builds and send them to Python Package Index
  Publish-Package:
    runs-on: ubuntu-latest
    needs: [Convert-Ubuntu-To-Manylinux]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@master
        with:
          name: dist_final
          path: ./dist
      - name: Publishing to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

  # create a GitHub release and tag current commit
  Create-Tag-Release:
    runs-on: ubuntu-latest
    needs: [Convert-Ubuntu-To-Manylinux]
    env:
      VER: Nil
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Obtain version
        run: |
          _VER=$(cat network_diffusion/__init__.py | grep __version__ | cut -d'"' -f2)
          echo "VER=${_VER}" >> $GITHUB_ENV
      - name: Add tag
        uses: rickstaa/action-create-tag@v1
        with:
          tag: ${{ env.VER }}
          message: "Added tag"
      - name: Download artifacts
        uses: actions/download-artifact@master
        with:
          name: dist_final
          path: ./dist
      - name: Add GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VER }}
          files: |
            dist/*.whl
            dist/*.tar.gz
